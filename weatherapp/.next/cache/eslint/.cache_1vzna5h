[{"C:\\Users\\angramd\\Desktop\\weatherAppTest\\weatherapp\\pages\\api\\hello.ts":"1","C:\\Users\\angramd\\Desktop\\weatherAppTest\\weatherapp\\pages\\index.tsx":"2","C:\\Users\\angramd\\Desktop\\weatherAppTest\\weatherapp\\pages\\index_Orig.tsx":"3","C:\\Users\\angramd\\Desktop\\weatherAppTest\\weatherapp\\pages\\_app.tsx":"4","C:\\Users\\angramd\\Desktop\\weatherAppTest\\weatherapp\\pages\\_app_Orig.tsx":"5","C:\\Users\\angramd\\Desktop\\weatherAppTest\\weatherapp\\components\\city-weather-refactor.tsx":"6","C:\\Users\\angramd\\Desktop\\weatherAppTest\\weatherapp\\components\\city-weather.tsx":"7"},{"size":307,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":1443,"mtime":1636045656012,"results":"10","hashOfConfig":"9"},{"size":2287,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":185,"mtime":1636042505993,"results":"12","hashOfConfig":"9"},{"size":188,"mtime":499162500000,"results":"13","hashOfConfig":"9"},{"size":2528,"mtime":1636043318499,"results":"14","hashOfConfig":"9"},{"size":1366,"mtime":1636042267197,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1x4oyzz",{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\angramd\\Desktop\\weatherAppTest\\weatherapp\\pages\\api\\hello.ts",[],"C:\\Users\\angramd\\Desktop\\weatherAppTest\\weatherapp\\pages\\index.tsx",[],"C:\\Users\\angramd\\Desktop\\weatherAppTest\\weatherapp\\pages\\index_Orig.tsx",[],"C:\\Users\\angramd\\Desktop\\weatherAppTest\\weatherapp\\pages\\_app.tsx",[],"C:\\Users\\angramd\\Desktop\\weatherAppTest\\weatherapp\\pages\\_app_Orig.tsx",[],"C:\\Users\\angramd\\Desktop\\weatherAppTest\\weatherapp\\components\\city-weather-refactor.tsx",["31"],"import React, { useState, useEffect } from \"react\";\n\nconst API_KEY = \"b07c6aae9638d6fea029603bf5d20c78\";\n\ninterface CityWeatherProps {\n  city: string;\n}\n\ninterface CityWeatherState {\n  // cityName: string;\n  wtd: string;\n  wicon: string;\n  wtr: number;\n  // isLoading: boolean;\n}\n\nconst CityWeatherRefactor = ({ city }: CityWeatherProps) => {\n  // const [cityName, setCityName] = useState<CityWeatherState[]>([]);\n  const [wtd, setWDR] = useState<CityWeatherState[] | null>(null);\n  const [wicon, setWICON] = useState<CityWeatherState[] | null>(null);\n  const [wtr, setWTR] = useState<number | null>(null);\n  // const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    let isMounted: boolean = true;\n\n    const getWeather = async () => {\n      await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`\n      )\n        .then((res) => res.json())\n        .then((data) => {\n          if (!data.name) {\n            setWDR(null);\n            setWICON(null);\n            setWTR(null);\n          } else if (isMounted) {\n            // setIsLoading(true);\n            setWDR(data.weather[0].description);\n            setWICON(data.weather[0].icon);\n            setWTR(data.main.temp);\n            // setCityName(data.name);\n            console.log(\"RESULTS: \", data);\n          }\n        });\n    };\n\n    getWeather();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [city]);\n\n  let degree : number;\n\n  const KtoF = (tempKevlin: number) => {\n    degree = ((tempKevlin - 273.15) * 9) / 5 + 32;\n\n    return degree.toFixed(0);\n  };\n\n  return wtd ? (\n    <article className=\"text-center bg-gray-400 rounded-md inline-block px-4 py-3 w-56\">\n      <h1 className=\"text-2xl text-white uppercase font-bold\">{city}</h1>\n      <figure className=\"m-0 p-0 w-full\">\n        <img\n          src={`http://openweathermap.org/img/wn/${wicon}@2x.png`}\n          className=\"m-auto\"\n          alt={`${wtd}`}\n        />\n      </figure>\n      <h2 className=\"mb-1 text-xl text-white capitalize\">{wtd}</h2>\n      <p className=\"text-lg text-white\">\n        {console.log(\"weatherResult\", wtr)}\n        Temperature:{\" \"}\n        <span className=\"font-bold text-2xl text-white\">\n          {wtr ? (KtoF(wtr)) : null} &#8457;\n        </span>\n      </p>\n    </article>\n  ) : (\n    <article className=\"text-center bg-gray-400 rounded-md inline-block px-4 py-3 w-56\">\n      <h2 className=\"mb-1 text-xl text-white capitalize\">No City Found</h2>\n    </article>\n  );\n};\n\nexport default CityWeatherRefactor;\n","C:\\Users\\angramd\\Desktop\\weatherAppTest\\weatherapp\\components\\city-weather.tsx",[],{"ruleId":"32","severity":1,"message":"33","line":67,"column":9,"nodeType":"34","endLine":71,"endColumn":11},"@next/next/no-img-element","Do not use <img>. Use Image from 'next/image' instead. See https://nextjs.org/docs/messages/no-img-element.","JSXOpeningElement"]